{"version":3,"sources":["components/CurrentColor.js","components/SimilarColors.js","calcDeltas.js","components/SearchBar.js","components/App.js","index.js"],"names":["CurrentColor","props","className","style","backgroundColor","color","hex","brand","productline","name","toUpperCase","SimilarColors","renderColors","similarColors","map","index","key","charAt","slice","parseFloat","Math","round","deltaE","toFixed","DeltaE","require","CalcDeltas","getDeltaE","color1","color2","lab1","L","ColorConvert","lab","raw","A","B","lab2","getDeltaE00","startCalculation","colors","a","productlines","_","uniqBy","newColors","matches","forEach","id","push","sortBy","lineColors","filter","match","find","console","log","downloadObjectAsJson","exportObj","exportName","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","setTimeout","axios","get","then","response","data","catch","error","categoryRenderer","Label","as","content","resultRenderer","source","SearchExampleCategory","initialState","isLoading","results","value","state","calculateDeltas","setSource","resArr","handleResultSelect","e","result","setState","onSubmit","handleSearchChange","length","filteredResults","searchTerms","trim","split","i","colorTerms","concat","every","term","re","RegExp","escapeRegExp","some","colorTerm","test","splice","this","Menu","fluid","Item","Icon","Search","input","icon","iconPosition","category","loading","onResultSelect","onSearchChange","debounce","leading","position","Dropdown","item","simple","direction","Header","text","Component","App","currentColor","onSearchSubmit","getSimilarColors","randomColor","floor","random","found","search","React","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.4af03aa9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CurrentColor = (props) => {\r\n    return (\r\n        <section className=\"current-color\" style={{ backgroundColor: props.color.hex }}>\r\n            <div>\r\n                <h4>{`${props.color.brand} ${props.color.productline}`}</h4>\r\n            </div>\r\n            <div>\r\n                <h1>{props.color.name}</h1>\r\n            </div>\r\n            <div>\r\n                <h4>{props.color.hex.toUpperCase()}</h4>\r\n            </div>\r\n        </section>\r\n        // <div className=\"row\" style={{ backgroundColor: props.color.hex, height: '30%' }}>\r\n        //     <div className=\"column mainColor color\">\r\n        //         <div style={{ width: '20%' }}>\r\n        //             <h4>{`${props.color.brand} ${props.color.productline}`}</h4>\r\n        //         </div>\r\n        //         <div style={{ width: '60%' }}>\r\n        //             <h1>{props.color.name}</h1>\r\n        //         </div>\r\n        //         <div style={{ width: '20%' }}>\r\n        //             <h4>{props.color.hex}</h4>\r\n        //         </div>\r\n        //         {/* <div className=\"save-color\">\r\n        //             <span>\r\n        //                 <i className=\"bookmark outline icon\"></i>\r\n        //             </span>\r\n        //         </div> */}\r\n        //     </div>\r\n        // </div>\r\n    );\r\n};\r\n\r\nexport default CurrentColor;\r\n","import React from 'react';\r\n\r\nconst SimilarColors = (props) => {\r\n    const renderColors = props.similarColors.map((color, index) => {\r\n        return (\r\n            <div key={index} className=\"similar-color\" style={{ backgroundColor: color.hex }}>\r\n                <div>\r\n                    <h4>{`${color.brand} ${color.productline}`}</h4>\r\n                </div>\r\n                <div>\r\n                    <h2>{color.name.charAt(0).toUpperCase() + color.name.slice(1)}</h2>\r\n                </div>\r\n                <div>\r\n                    <h4>{`Î”=${parseFloat(Math.round(color.deltaE * 100) / 100).toFixed(2)}`}</h4>\r\n                </div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <section className=\"similar-colors-wrapper\">{renderColors}</section>\r\n\r\n        // <div className=\"row\" style={{ height: '70%' }}>\r\n        //     {renderColors}\r\n        // </div>\r\n    );\r\n};\r\n\r\nexport default SimilarColors;\r\n","import ColorConvert from 'color-convert';\r\nimport axios from 'axios';\r\nimport _ from 'lodash';\r\nvar DeltaE = require('delta-e');\r\n\r\nexport default class CalcDeltas {\r\n    constructor() {\r\n        axios\r\n            .get('./colors.json')\r\n            .then((response) => {\r\n                this.startCalculation(response.data);\r\n            })\r\n            .catch(function(error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    getDeltaE = (color1, color2) => {\r\n        // Convert color 1 to LAB format\r\n        color1 = ColorConvert.hex.lab.raw(color1);\r\n        const lab1 = { L: color1[0], A: color1[1], B: color1[2] };\r\n\r\n        // Convert color 2 to LAB format\r\n        color2 = ColorConvert.hex.lab.raw(color2);\r\n        const lab2 = { L: color2[0], A: color2[1], B: color2[2] };\r\n\r\n        // Get the color difference\r\n        return DeltaE.getDeltaE00(lab1, lab2);\r\n    };\r\n\r\n    startCalculation = async (colors) => {\r\n        // Get the unique product lines\r\n        let productlines = _.uniqBy(colors, 'productline');\r\n\r\n        const newColors = colors.map((color1) => {\r\n            let matches = [];\r\n            colors.forEach((color2) => {\r\n                // Check that we aren't matching against the same color\r\n                if (color2.id !== color1.id) {\r\n                    // Calculate DeltaE\r\n                    const deltaE = this.getDeltaE(color1.hex, color2.hex);\r\n\r\n                    // Push Delta value into array\r\n                    matches.push({ id: color2.id, deltaE });\r\n                }\r\n            });\r\n\r\n            // Sort all matches\r\n            matches = _.sortBy(matches, ['deltaE']);\r\n\r\n            // Get top 5 matches for each product line\r\n            color1.matches = [];\r\n            productlines.forEach((productline) => {\r\n                let lineColors = _.filter(matches, (match) => {\r\n                    const found = _.find(colors, ['id', match.id]);\r\n                    const myValue = found.productline === productline.productline;\r\n                    return myValue;\r\n                });\r\n                lineColors = lineColors.slice(0, 5);\r\n                color1.matches = [...color1.matches, ...lineColors];\r\n            });\r\n\r\n            // Sort final matches\r\n            color1.matches = _.sortBy(color1.matches, ['deltaE']);\r\n            return color1;\r\n        });\r\n\r\n        console.log(newColors);\r\n        this.downloadObjectAsJson(newColors, 'colorsMatched');\r\n    };\r\n\r\n    downloadObjectAsJson = (exportObj, exportName) => {\r\n        var dataStr = 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(exportObj));\r\n        var downloadAnchorNode = document.createElement('a');\r\n        downloadAnchorNode.setAttribute('href', dataStr);\r\n        downloadAnchorNode.setAttribute('download', exportName + '.json');\r\n        document.body.appendChild(downloadAnchorNode); // required for firefox\r\n        downloadAnchorNode.click();\r\n\r\n        setTimeout(function() {\r\n            //document.body.removeChild(downloadAnchorNode);\r\n            //downloadAnchorNode.remove();\r\n            //URL.revokeObjectURL(source);\r\n        }, 10000);\r\n    };\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { Search, Label, Dropdown, Menu, Icon } from 'semantic-ui-react';\r\nimport CalcDeltas from '../calcDeltas';\r\n\r\n// Semantic UI React Search Bar\r\n// https://react.semantic-ui.com/modules/search/#types-category-custom\r\n\r\nconst categoryRenderer = ({ brand }) => <Label as=\"span\" content={brand} />;\r\n\r\ncategoryRenderer.propTypes = {\r\n    brand: PropTypes.string,\r\n};\r\n\r\nconst resultRenderer = ({ name }) => <Label id={name} content={name} />;\r\n\r\nresultRenderer.propTypes = {\r\n    name: PropTypes.string,\r\n    description: PropTypes.string,\r\n};\r\n\r\nlet source = {};\r\n\r\nexport default class SearchExampleCategory extends Component {\r\n    initialState = {\r\n        isLoading: false,\r\n        results: [],\r\n        value: '',\r\n        colors: this.props.colors,\r\n    };\r\n    state = this.initialState;\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.colors.length <= 0 && this.props.colors.length > 0) {\r\n            this.initialState.colors = this.props.colors;\r\n            this.setState({ colors: this.props.colors });\r\n            this.setSource(this.props.colors);\r\n        }\r\n    }\r\n\r\n    calculateDeltas = () => {\r\n        //console.log(this.state.colors);\r\n        new CalcDeltas();\r\n    };\r\n\r\n    setSource = (colors) => {\r\n        source = {};\r\n        // Put this.props.colors into the \"source\" variable\r\n        colors.forEach((color) => {\r\n            let resArr = [];\r\n            const brand = `${color.brand} ${color.productline}`;\r\n            if (brand in source) {\r\n                resArr = source[brand].results;\r\n            }\r\n\r\n            resArr.push(color);\r\n\r\n            source[brand] = {\r\n                brand: brand,\r\n                results: resArr,\r\n            };\r\n        });\r\n    };\r\n\r\n    handleResultSelect = (e, { result }) => {\r\n        //this.setState({ value: result.title });\r\n        this.setState({ value: '' });\r\n        // Pass the searched color to App.js event handler\r\n        this.props.onSubmit(result);\r\n    };\r\n\r\n    handleSearchChange = (e, { value }) => {\r\n        this.setState({ isLoading: true, value });\r\n\r\n        setTimeout(() => {\r\n            // Clear the state back to default values\r\n            if (this.state.value.length < 1) return this.setState(this.initialState);\r\n\r\n            let filteredResults = {};\r\n\r\n            // Create an array of the words that were searched\r\n            const searchTerms = this.state.value.trim().split(' ');\r\n\r\n            // Loop over every color in the database\r\n            for (const i in source) {\r\n                const brand = source[i].brand;\r\n                const colors = source[i].results;\r\n\r\n                // Checks for a match with the given color against all search terms\r\n                const isMatch = (color) => {\r\n                    // split the color's name and brand into an array\r\n                    let colorTerms = color.name.split(' ').concat(color.brand.split(' '));\r\n\r\n                    // return true if 'every' searchTerm matches a colorTerm\r\n                    return searchTerms.every((term) => {\r\n                        // Create regex to check colorTerms against\r\n                        const re = new RegExp(_.escapeRegExp(term), 'i');\r\n\r\n                        // return true if any of the colorTerms matches the regex\r\n                        return colorTerms.some((colorTerm, index) => {\r\n                            if (re.test(colorTerm)) {\r\n                                colorTerms.splice(index, 1);\r\n                                return true;\r\n                            } else {\r\n                                return false;\r\n                            }\r\n                        });\r\n                    });\r\n                };\r\n\r\n                // Call the \"isMatch\" function for each color in \"colors\", then save the \"true\" results to an array\r\n                const results = _.filter(colors, isMatch);\r\n\r\n                // Concat the results to the filteredResults collection\r\n                if (results.length) filteredResults[i] = { brand, results };\r\n            }\r\n\r\n            // Save the results to the state\r\n            this.setState({\r\n                isLoading: false,\r\n                results: filteredResults,\r\n            });\r\n        }, 300);\r\n    };\r\n\r\n    render() {\r\n        const { isLoading, value, results } = this.state;\r\n\r\n        return (\r\n            <Menu fluid>\r\n                <Menu.Item name=\"tint\">\r\n                    <Icon name=\"tint\" />\r\n                </Menu.Item>\r\n\r\n                <Menu.Item id=\"searchItem\">\r\n                    <Search\r\n                        input={{ icon: 'search', iconPosition: 'left' }}\r\n                        id=\"searchInput\"\r\n                        fluid\r\n                        category\r\n                        categoryRenderer={categoryRenderer}\r\n                        loading={isLoading}\r\n                        onResultSelect={this.handleResultSelect}\r\n                        onSearchChange={_.debounce(this.handleSearchChange, 500, {\r\n                            leading: true,\r\n                        })}\r\n                        resultRenderer={resultRenderer}\r\n                        results={results}\r\n                        value={value}\r\n                        {...this.props}\r\n                    />\r\n                </Menu.Item>\r\n                <Menu.Menu position=\"right\">\r\n                    <Dropdown icon=\"filter\" item simple direction=\"right\">\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Header content=\"Filter by Product Line\" />\r\n                            {/* <Dropdown.Divider /> */}\r\n                            <Dropdown.Item icon=\"\" text=\"Citadel Base\" />\r\n                            <Dropdown.Item icon=\"check\" text=\"Citadel Dry\" />\r\n                            <Dropdown.Item icon=\"check\" text=\"Citadel Layer &amp; Edge\" />\r\n                            <Dropdown.Item icon=\"\" text=\"Reaper HD\" />\r\n                            <Dropdown.Item icon=\"\" text=\"Reaper MSP\" />\r\n                            <Dropdown.Item icon=\"\" text=\"Reaper Pro\" />\r\n                            <Dropdown.Item icon=\"check\" text=\"Privateer Press P3\" />\r\n                            <Dropdown.Item icon=\"check\" text=\"Vallejo Game Color\" />\r\n                            <Dropdown.Item icon=\"check\" text=\"Vallejo Model Color\" />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Menu>\r\n            </Menu>\r\n\r\n            // <div id=\"searchBar\" className=\"ui secondary menu\" style={{ height: '50px' }}>\r\n            //     <button className=\"ui item icon button\" onClick={this.calculateDeltas}>\r\n            //         <i className=\"calculator icon\"></i>\r\n            //     </button>\r\n\r\n            //     <form className=\"ui secondary menu fluid form\" id=\"searchForm\">\r\n            //         <Search\r\n            //             fluid\r\n            //             category\r\n            //             categoryRenderer={categoryRenderer}\r\n            //             loading={isLoading}\r\n            //             onResultSelect={this.handleResultSelect}\r\n            //             onSearchChange={_.debounce(this.handleSearchChange, 500, {\r\n            //                 leading: true,\r\n            //             })}\r\n            //             resultRenderer={resultRenderer}\r\n            //             results={results}\r\n            //             value={value}\r\n            //             {...this.props}\r\n            //         />\r\n            //     </form>\r\n\r\n            //     {/* <button className=\"ui item icon button\">\r\n            //         <i className=\"filter icon\"></i>\r\n            //     </button> */}\r\n            //     <Menu>\r\n            //         <Menu.Menu position=\"right\">\r\n            //             <Dropdown icon=\"filter\" floating button direction=\"right\" className=\"icon\">\r\n            //                 <Dropdown.Menu>\r\n            //                     <Dropdown.Header icon=\"tags\" content=\"Filter by Product Line\" />\r\n            //                     <Dropdown.Divider />\r\n            //                     <Dropdown.Item icon=\"check\" text=\"Important\" />\r\n            //                     <Dropdown.Item icon=\"\" text=\"Announcement\" />\r\n            //                     <Dropdown.Item icon=\"check\" text=\"Discussion\" />\r\n            //                 </Dropdown.Menu>\r\n            //             </Dropdown>\r\n            //         </Menu.Menu>\r\n            //     </Menu>\r\n            // </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport CurrentColor from './CurrentColor';\r\nimport SimilarColors from './SimilarColors';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport SearchBar from './SearchBar';\r\nimport _ from 'lodash';\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        currentColor: {\r\n            name: 'Turquoise',\r\n            hex: '#03676f',\r\n            brand: 'Vallejo',\r\n            productline: 'Game Color',\r\n            matches: [],\r\n        },\r\n        similarColors: [\r\n            {\r\n                name: 'Sotek Green',\r\n                hex: '#0c6a74',\r\n                brand: 'Citadel',\r\n                productline: 'Layer & Edge',\r\n            },\r\n        ],\r\n        colors: [],\r\n    };\r\n\r\n    async componentDidMount() {\r\n        // Load JSON color data\r\n        axios\r\n            .get('./colorsMatched.json')\r\n            .then((response) => {\r\n                const randomColor = response.data[Math.floor(Math.random() * response.data.length)];\r\n                this.setState(\r\n                    {\r\n                        colors: response.data,\r\n                        currentColor: randomColor,\r\n                    },\r\n                    () => {\r\n                        this.setState({ similarColors: this.getSimilarColors(randomColor) });\r\n                    }\r\n                );\r\n            })\r\n            .catch(function(error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    onSearchSubmit = (color) => {\r\n        this.setState({\r\n            currentColor: color,\r\n            similarColors: this.getSimilarColors(color),\r\n        });\r\n    };\r\n\r\n    getSimilarColors(currentColor) {\r\n        if (currentColor.matches) {\r\n            let similarColors = currentColor.matches.map((match) => {\r\n                const found = _.find(this.state.colors, ['id', match.id]);\r\n                if (found) {\r\n                    found.deltaE = match.deltaE;\r\n                    return found;\r\n                } else {\r\n                    return null;\r\n                }\r\n            });\r\n            return similarColors.slice(0, 5);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let search;\r\n        if (this.state.colors.length > 0) {\r\n            search = <SearchBar onSubmit={this.onSearchSubmit} colors={this.state.colors} />;\r\n        } else {\r\n            search = <SearchBar onSubmit={this.onSearchSubmit} colors={[]} />;\r\n        }\r\n\r\n        let similarColors;\r\n        if (this.state.similarColors) {\r\n            similarColors = <SimilarColors similarColors={this.state.similarColors} />;\r\n        }\r\n\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <header>{search}</header>\r\n                <main>\r\n                    {/* <div className=\"ui equal width center aligned padded grid\" style={{ flexGrow: '1' }}> */}\r\n                    <CurrentColor color={this.state.currentColor} />\r\n                    {similarColors}\r\n                    {/* </div> */}\r\n                </main>\r\n                <footer>\r\n                    <div>Best Match</div>\r\n                    <div id=\"footerline\"></div>\r\n                    <div>Good Match</div>\r\n                </footer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}