{"version":3,"sources":["components/CurrentColor.js","components/SimilarColors.js","calcDeltas.js","components/SearchBar.js","components/App.js","index.js"],"names":["CurrentColor","props","className","style","backgroundColor","color","hex","brand","productline","name","toUpperCase","SimilarColors","renderColors","similarColors","map","index","key","charAt","slice","onClick","parseFloat","Math","round","delta","toFixed","DeltaE","require","CalcDeltas","doCalculation","getDeltaE","color1","color2","lab1","L","ColorConvert","lab","raw","A","B","lab2","getDeltaE00","startCalculation","colors","a","productlines","_","uniqBy","newColors","matches","forEach","id","deltaE","push","sortBy","lineColors","filter","match","find","console","log","downloadObjectAsJson","exportObj","exportName","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","setTimeout","axios","get","then","response","data","catch","error","source","resultRenderer","result","title","description","productcode","SearchExampleCategory","initialState","isLoading","results","value","state","calculateDeltas","setSource","handleResultSelect","e","setState","onSubmit","getElementById","blur","handleSearchChange","length","searchValue","escapeRegExp","toLowerCase","re","RegExp","isStartWith","test","sortedMatches","indexOf","this","Search","input","icon","iconPosition","loading","onResultSelect","onSearchChange","debounce","leading","Component","InitialState","currentColor","filters","colorDataVersion","calcDelta","calcDeltas","App","localStorage","getItem","parse","onSearchSubmit","ReactGA","event","category","action","getSimilarColors","dimmerOpen","x","replace","setRandomColor","randomColor","floor","random","onFilterClick","text","stopPropagation","findIndex","item","active","initialize","pageview","getFilters","clear","setItem","line","activeFilters","found","includes","Icon","Dropdown","multiple","Menu","Header","content","scrolling","renderFilterList","Item","deltaWhite","Dimmer","inverted","Loader","renderHeader","renderMain","renderFooter","React","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.a97d2414.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CurrentColor = (props) => {\r\n    return (\r\n        <section className=\"current-color\" style={{ backgroundColor: props.color.hex }}>\r\n            <div>\r\n                <h4>{`${props.color.brand} ${props.color.productline}`}</h4>\r\n            </div>\r\n            <div>\r\n                <h1>{props.color.name}</h1>\r\n            </div>\r\n            <div>\r\n                <h4>{props.color.hex.toUpperCase()}</h4>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default CurrentColor;\r\n","import React from 'react';\r\n\r\nconst SimilarColors = (props) => {\r\n    const renderColors = props.similarColors.map((color, index) => {\r\n        return (\r\n            <div key={index} className=\"similar-color\" style={{ backgroundColor: color.hex }}>\r\n                <div>\r\n                    <h4>{`${color.brand} ${color.productline}`}</h4>\r\n                    <h2>{color.name.charAt(0).toUpperCase() + color.name.slice(1)}</h2>\r\n                </div>\r\n                <div>\r\n                    <h4 className=\"delta\" onClick={props.onClick}>\r\n                        {`Δ=${parseFloat(Math.round(color.delta * 100) / 100).toFixed(2)}`}\r\n                    </h4>\r\n                </div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return <section className=\"similar-colors-wrapper\">{renderColors}</section>;\r\n};\r\n\r\nexport default SimilarColors;\r\n","import ColorConvert from 'color-convert';\r\nimport axios from 'axios';\r\nimport _ from 'lodash';\r\nvar DeltaE = require('delta-e');\r\n\r\nexport default class CalcDeltas {\r\n    constructor(doCalculation = true) {\r\n        if (doCalculation) {\r\n            axios\r\n                .get('./colors.json')\r\n                .then((response) => {\r\n                    this.startCalculation(response.data);\r\n                })\r\n                .catch(function(error) {\r\n                    console.log(error);\r\n                });\r\n        }\r\n    }\r\n\r\n    getDeltaE = (color1, color2) => {\r\n        // Convert color 1 to LAB format\r\n        color1 = ColorConvert.hex.lab.raw(color1);\r\n        const lab1 = { L: color1[0], A: color1[1], B: color1[2] };\r\n\r\n        // Convert color 2 to LAB format\r\n        color2 = ColorConvert.hex.lab.raw(color2);\r\n        const lab2 = { L: color2[0], A: color2[1], B: color2[2] };\r\n\r\n        // Get the color difference\r\n        return DeltaE.getDeltaE00(lab1, lab2);\r\n    };\r\n\r\n    startCalculation = async (colors) => {\r\n        // Get the unique product lines\r\n        let productlines = _.uniqBy(colors, 'productline');\r\n\r\n        const newColors = colors.map((color1) => {\r\n            let matches = [];\r\n            colors.forEach((color2) => {\r\n                // Check that we aren't matching against the same color\r\n                if (color2.id !== color1.id) {\r\n                    // Calculate DeltaE\r\n                    const deltaE = this.getDeltaE(color1.hex, color2.hex);\r\n\r\n                    // Push Delta value into array\r\n                    matches.push({ id: color2.id, deltaE });\r\n                }\r\n            });\r\n\r\n            // Sort all matches\r\n            matches = _.sortBy(matches, ['deltaE']);\r\n\r\n            // Get top 5 matches for each product line\r\n            color1.matches = [];\r\n            productlines.forEach((productline) => {\r\n                let lineColors = _.filter(matches, (match) => {\r\n                    const found = _.find(colors, ['id', match.id]);\r\n                    const myValue = found.productline === productline.productline;\r\n                    return myValue;\r\n                });\r\n                lineColors = lineColors.slice(0, 5);\r\n                color1.matches = [...color1.matches, ...lineColors];\r\n            });\r\n\r\n            // Sort final matches\r\n            color1.matches = _.sortBy(color1.matches, ['deltaE']);\r\n            return color1;\r\n        });\r\n\r\n        console.log(newColors);\r\n        this.downloadObjectAsJson(newColors, 'colorsMatched');\r\n    };\r\n\r\n    downloadObjectAsJson = (exportObj, exportName) => {\r\n        var dataStr = 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(exportObj));\r\n        var downloadAnchorNode = document.createElement('a');\r\n        downloadAnchorNode.setAttribute('href', dataStr);\r\n        downloadAnchorNode.setAttribute('download', exportName + '.json');\r\n        document.body.appendChild(downloadAnchorNode); // required for firefox\r\n        downloadAnchorNode.click();\r\n\r\n        setTimeout(function() {\r\n            //document.body.removeChild(downloadAnchorNode);\r\n            //downloadAnchorNode.remove();\r\n            //URL.revokeObjectURL(source);\r\n        }, 10000);\r\n    };\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { Search } from 'semantic-ui-react';\r\nimport CalcDeltas from '../calcDeltas';\r\n\r\n// Semantic UI React Search Bar\r\n// https://react.semantic-ui.com/modules/search/#types-standard-custom\r\n\r\nlet source = null;\r\n\r\nconst resultRenderer = (result) => (\r\n    <div className=\"customResult\">\r\n        <div>\r\n            <div className=\"resultTitle\">\r\n                <b>{result.title}</b>\r\n            </div>\r\n            <div className=\"resultDescription\">\r\n                {result.description}\r\n                <i>{result.color.productcode === '-' ? '' : ' - ' + result.color.productcode}</i>\r\n            </div>\r\n        </div>\r\n        <div className=\"colorCircle\" style={{ backgroundColor: result.color.hex }}></div>\r\n    </div>\r\n);\r\n\r\nresultRenderer.propTypes = {\r\n    title: PropTypes.string,\r\n    description: PropTypes.string,\r\n};\r\n\r\nexport default class SearchExampleCategory extends Component {\r\n    initialState = {\r\n        isLoading: false,\r\n        results: [],\r\n        value: '',\r\n        colors: this.props.colors,\r\n    };\r\n    state = this.initialState;\r\n\r\n    componentDidUpdate() {\r\n        //if (this.state.colors.length <= 0 && this.props.colors.length > 0) {\r\n        if ((source === null) & (this.props.colors.length > 0)) {\r\n            this.initialState.colors = this.props.colors;\r\n            this.setState({ colors: this.props.colors });\r\n            this.setSource(this.props.colors);\r\n        }\r\n    }\r\n\r\n    calculateDeltas = () => {\r\n        //console.log(this.state.colors);\r\n        new CalcDeltas();\r\n    };\r\n\r\n    setSource = (colors) => {\r\n        source = [];\r\n        // Put this.props.colors into the \"source\" variable\r\n        colors.forEach((color) => {\r\n            source.push({\r\n                key: color.id,\r\n                title: color.name,\r\n                description: `${color.brand} ${color.productline}`,\r\n                color: color,\r\n            });\r\n        });\r\n    };\r\n\r\n    handleResultSelect = (e, { result }) => {\r\n        //this.setState({ value: result.title });\r\n        this.setState({ value: '' });\r\n        // Pass the searched color to App.js event handler\r\n        this.props.onSubmit(result.color);\r\n\r\n        document.getElementById('searchInput').blur();\r\n    };\r\n\r\n    handleSearchChange = (e, { value }) => {\r\n        this.setState({ isLoading: true, value });\r\n\r\n        setTimeout(() => {\r\n            if (this.state.value.length < 1) return this.setState(this.initialState);\r\n\r\n            // Step 1: Get everything that STARTS WITH the searched value\r\n            const searchValue = _.escapeRegExp(this.state.value.toLowerCase());\r\n            const re = new RegExp('^' + searchValue, 'i');\r\n            const isStartWith = (result) => re.test(result.title.toLowerCase());\r\n\r\n            let matches = _.filter(source, isStartWith);\r\n            let sortedMatches = _.sortBy(matches, [(match) => match.title]);\r\n\r\n            // Step 2: Get everything that contains the searched value as a WHOLE WORD\r\n            const isWholeWord = (result) => {\r\n                const containsValue = result.title.toLowerCase().indexOf(` ${searchValue}`, 1) > -1;\r\n                return containsValue && !isStartWith(result);\r\n            };\r\n\r\n            matches = _.filter(source, isWholeWord);\r\n            sortedMatches = [...sortedMatches, ..._.sortBy(matches, [(match) => match.title])];\r\n\r\n            // Step 2: Get everything that CONTAINS the searched value\r\n            const isContains = (result) => {\r\n                const containsValue = result.title.toLowerCase().indexOf(searchValue, 1) > -1;\r\n                return (\r\n                    containsValue &&\r\n                    result.title.toLowerCase().indexOf(` ${searchValue}`, 1) === -1 &&\r\n                    !isStartWith(result)\r\n                );\r\n            };\r\n\r\n            matches = _.filter(source, isContains);\r\n            sortedMatches = [...sortedMatches, ..._.sortBy(matches, [(match) => match.title])];\r\n\r\n            this.setState({\r\n                isLoading: false,\r\n                results: sortedMatches,\r\n            });\r\n        }, 300);\r\n    };\r\n\r\n    render() {\r\n        const { isLoading, value, results } = this.state;\r\n\r\n        return (\r\n            <Search\r\n                input={{ icon: 'search', iconPosition: 'left' }}\r\n                id=\"searchInput\"\r\n                loading={isLoading}\r\n                onResultSelect={this.handleResultSelect}\r\n                onSearchChange={_.debounce(this.handleSearchChange, 500, {\r\n                    leading: true,\r\n                })}\r\n                results={results}\r\n                value={value}\r\n                resultRenderer={resultRenderer}\r\n                {...this.props}\r\n            />\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport CurrentColor from './CurrentColor';\r\nimport SimilarColors from './SimilarColors';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport SearchBar from './SearchBar';\r\nimport _ from 'lodash';\r\nimport { Dimmer, Loader, Icon, Dropdown } from 'semantic-ui-react';\r\nimport ReactGA from 'react-ga';\r\nimport calcDeltas from '../calcDeltas';\r\n\r\nconst InitialState = {\r\n    currentColor: null,\r\n    similarColors: null,\r\n    colors: [],\r\n    filters: [],\r\n};\r\n\r\nconst colorDataVersion = 1;\r\nconst calcDelta = new calcDeltas(false);\r\n\r\nclass App extends React.Component {\r\n    // Retrieve the last state from localStorage\r\n    state = localStorage.getItem(`appState${colorDataVersion}`)\r\n        ? JSON.parse(localStorage.getItem(`appState${colorDataVersion}`))\r\n        : InitialState;\r\n\r\n    async componentDidMount() {\r\n        ReactGA.initialize('UA-149514108-1');\r\n        ReactGA.pageview('/homepage');\r\n\r\n        if (this.state.colors.length === 0) {\r\n            // Load JSON color data\r\n\r\n            ReactGA.event({\r\n                category: 'Load Colors',\r\n                action: `Load Colors Version ${colorDataVersion}`,\r\n            });\r\n\r\n            axios\r\n                .get('./colorsMatched.json')\r\n                .then((response) => {\r\n                    this.setState({ colors: response.data }, () => {\r\n                        this.getFilters();\r\n                        this.setRandomColor();\r\n                    });\r\n                })\r\n                .catch(function(error) {\r\n                    console.log(error);\r\n                });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // Remember state for the next mount\r\n        localStorage.clear();\r\n        localStorage.setItem(`appState${colorDataVersion}`, JSON.stringify(this.state));\r\n    }\r\n\r\n    onSearchSubmit = (color) => {\r\n        ReactGA.event({\r\n            category: 'Search',\r\n            action: 'Search Submit',\r\n        });\r\n\r\n        this.setState({\r\n            currentColor: color,\r\n            similarColors: this.getSimilarColors(color),\r\n        });\r\n    };\r\n\r\n    dimmerOpen = () => {\r\n        var x = document.getElementById('snackbar');\r\n        x.className = 'show';\r\n        setTimeout(function() {\r\n            x.className = x.className.replace('show', '');\r\n        }, 3000);\r\n    };\r\n\r\n    getFilters() {\r\n        let productlines = _.uniqBy(this.state.colors, 'productline');\r\n        productlines = productlines.map((line) => {\r\n            return { productline: `${line.brand} ${line.productline}`, active: true };\r\n        });\r\n        this.setState({ filters: productlines });\r\n    }\r\n\r\n    getSimilarColors(currentColor) {\r\n        if (currentColor.matches) {\r\n            const activeFilters = [];\r\n            _.forEach(this.state.filters, (filter) => {\r\n                if (filter.active) {\r\n                    activeFilters.push(filter.productline);\r\n                }\r\n            });\r\n            let similarColors = [];\r\n\r\n            _.forEach(currentColor.matches, (match) => {\r\n                const found = _.find(this.state.colors, (color) => {\r\n                    return color.id === match.id && _.includes(activeFilters, `${color.brand} ${color.productline}`);\r\n                });\r\n\r\n                if (found) {\r\n                    found.delta = match.deltaE;\r\n                    similarColors.push(found);\r\n                }\r\n            });\r\n\r\n            if (similarColors.length >= 5) {\r\n                return similarColors.slice(0, 5);\r\n            } else {\r\n                return similarColors.slice(0, similarColors.length);\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    setRandomColor = () => {\r\n        ReactGA.event({\r\n            category: 'Button',\r\n            action: 'Random Color Button Click',\r\n        });\r\n\r\n        const randomColor = this.state.colors[Math.floor(Math.random() * this.state.colors.length)];\r\n        this.setState(\r\n            {\r\n                currentColor: randomColor,\r\n            },\r\n            () => {\r\n                this.setState({ similarColors: this.getSimilarColors(randomColor) });\r\n            }\r\n        );\r\n    };\r\n\r\n    renderHeader() {\r\n        return (\r\n            <header>\r\n                <nav>\r\n                    {/* <div className=\"brand\">\r\n                        <h3>Pigment</h3>\r\n                    </div> */}\r\n                    <button onClick={this.setRandomColor}>\r\n                        {/* <Icon name=\"tint\" /> */}\r\n                        <Icon name=\"random\" />\r\n                    </button>\r\n                    <div className=\"search-wrapper\">\r\n                        <SearchBar onSubmit={this.onSearchSubmit} colors={this.state.colors} />\r\n                    </div>\r\n                    <div className=\"filter-button\">\r\n                        <Dropdown multiple icon=\"filter\">\r\n                            <Dropdown.Menu>\r\n                                <Dropdown.Header\r\n                                    icon=\"tags\"\r\n                                    className=\"filterHeader\"\r\n                                    content=\"Filter by Product Line\"\r\n                                />\r\n                                <Dropdown.Menu scrolling>{this.renderFilterList()}</Dropdown.Menu>\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </div>\r\n                </nav>\r\n            </header>\r\n        );\r\n    }\r\n\r\n    onFilterClick = (e, { text }) => {\r\n        e.stopPropagation();\r\n        const filters = [...this.state.filters];\r\n        const index = _.findIndex(filters, (item) => {\r\n            return `${item.brand} ${item.productline}`.indexOf(text) > -1;\r\n        });\r\n        filters[index].active = !filters[index].active;\r\n        this.setState({ filters, similarColors: this.getSimilarColors(this.state.currentColor) });\r\n    };\r\n\r\n    renderFilterList() {\r\n        return this.state.filters.map((filter, index) => {\r\n            return (\r\n                <Dropdown.Item\r\n                    key={index}\r\n                    icon={filter.active ? 'check square outline' : 'square outline'}\r\n                    text={filter.productline}\r\n                    onClick={this.onFilterClick}\r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    renderMain() {\r\n        var deltaWhite = this.state.currentColor ? calcDelta.getDeltaE(this.state.currentColor.hex, '#FFFFFF') : 100;\r\n        if (this.state.currentColor !== null && this.state.similarColors !== null) {\r\n            return (\r\n                <main className={deltaWhite < 33 ? 'dark' : ''}>\r\n                    <CurrentColor color={this.state.currentColor} />\r\n                    <SimilarColors similarColors={this.state.similarColors} onClick={this.dimmerOpen} />\r\n                </main>\r\n            );\r\n        } else {\r\n            return (\r\n                <main>\r\n                    <Dimmer active inverted>\r\n                        <Loader inverted>Loading</Loader>\r\n                    </Dimmer>\r\n                </main>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderFooter() {\r\n        return (\r\n            <footer>\r\n                <div>\r\n                    <h4>Best Match</h4>\r\n                </div>\r\n                <div id=\"footerline\"></div>\r\n                <div>\r\n                    <h4>Good Match</h4>\r\n                </div>\r\n            </footer>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                {this.renderHeader()}\r\n                {this.renderMain()}\r\n                {this.renderFooter()}\r\n                <div id=\"snackbar\">\r\n                    <div>\r\n                        The Delta (Δ) value indicates the difference between two colors. The lower the number, the\r\n                        better the match!\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}