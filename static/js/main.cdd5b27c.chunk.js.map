{"version":3,"sources":["components/CurrentColor.js","components/SimilarColors.js","calcDeltas.js","components/SearchBar.js","components/App.js","index.js"],"names":["CurrentColor","props","className","style","backgroundColor","color","hex","brand","productline","name","toUpperCase","SimilarColors","renderColors","similarColors","map","index","key","charAt","slice","parseFloat","Math","round","delta","toFixed","DeltaE","require","CalcDeltas","doCalculation","getDeltaE","color1","color2","lab1","L","ColorConvert","lab","raw","A","B","lab2","getDeltaE00","startCalculation","colors","a","productlines","_","uniqBy","newColors","matches","forEach","id","deltaE","push","sortBy","lineColors","filter","match","find","console","log","downloadObjectAsJson","exportObj","exportName","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","setTimeout","axios","get","then","response","data","catch","error","categoryRenderer","Label","as","content","resultRenderer","source","SearchExampleCategory","initialState","isLoading","results","value","state","calculateDeltas","setSource","resArr","handleResultSelect","e","result","setState","onSubmit","handleSearchChange","length","filteredResults","searchTerms","trim","split","i","colorTerms","concat","every","term","re","RegExp","escapeRegExp","some","colorTerm","test","splice","this","Search","input","icon","iconPosition","fluid","category","placeholder","loading","onResultSelect","onSearchChange","debounce","leading","Component","InitialState","currentColor","filters","colorDataVersion","calcDelta","calcDeltas","App","localStorage","getItem","parse","onSearchSubmit","ReactGA","event","action","getSimilarColors","setRandomColor","randomColor","floor","random","onFilterClick","text","stopPropagation","findIndex","item","indexOf","active","initialize","pageview","getFilters","clear","setItem","line","activeFilters","found","includes","onClick","Icon","Dropdown","multiple","Menu","Header","scrolling","renderFilterList","Item","deltaWhite","Dimmer","inverted","Loader","renderHeader","renderMain","renderFooter","React","ReactDOM","render","querySelector"],"mappings":"+RAkBeA,EAhBM,SAACC,GAClB,OACI,6BAASC,UAAU,gBAAgBC,MAAO,CAAEC,gBAAiBH,EAAMI,MAAMC,MACrE,6BACI,sCAAQL,EAAMI,MAAME,MAApB,YAA6BN,EAAMI,MAAMG,eAE7C,6BACI,4BAAKP,EAAMI,MAAMI,OAErB,6BACI,4BAAKR,EAAMI,MAAMC,IAAII,kBCUtBC,EApBO,SAACV,GACnB,IAAMW,EAAeX,EAAMY,cAAcC,IAAI,SAACT,EAAOU,GACjD,OACI,yBAAKC,IAAKD,EAAOb,UAAU,gBAAgBC,MAAO,CAAEC,gBAAiBC,EAAMC,MACvE,6BACI,sCAAQD,EAAME,MAAd,YAAuBF,EAAMG,eAEjC,6BACI,4BAAKH,EAAMI,KAAKQ,OAAO,GAAGP,cAAgBL,EAAMI,KAAKS,MAAM,KAE/D,6BACI,6CAAUC,WAAWC,KAAKC,MAAoB,IAAdhB,EAAMiB,OAAe,KAAKC,QAAQ,SAMlF,OAAO,6BAASrB,UAAU,0BAA0BU,I,8EChBpDY,EAASC,EAAQ,KAEAC,EACjB,aAAmC,IAAD,OAAtBC,IAAsB,kFAalCC,UAAY,SAACC,EAAQC,GAGjB,IAAMC,EAAO,CAAEC,GADfH,EAASI,IAAa3B,IAAI4B,IAAIC,IAAIN,IACT,GAAIO,EAAGP,EAAO,GAAIQ,EAAGR,EAAO,IAI/CS,EAAO,CAAEN,GADfF,EAASG,IAAa3B,IAAI4B,IAAIC,IAAIL,IACT,GAAIM,EAAGN,EAAO,GAAIO,EAAGP,EAAO,IAGrD,OAAON,EAAOe,YAAYR,EAAMO,IAvBF,KA0BlCE,iBA1BkC,sCA0Bf,WAAOC,GAAP,iBAAAC,EAAA,qDAEXC,EAAeC,IAAEC,OAAOJ,EAAQ,eAE9BK,EAAYL,EAAO3B,IAAI,SAACe,GAC1B,IAAIkB,EAAU,GA6Bd,OA5BAN,EAAOO,QAAQ,SAAClB,GAEZ,GAAIA,EAAOmB,KAAOpB,EAAOoB,GAAI,CAEzB,IAAMC,EAAS,EAAKtB,UAAUC,EAAOvB,IAAKwB,EAAOxB,KAGjDyC,EAAQI,KAAK,CAAEF,GAAInB,EAAOmB,GAAIC,cAKtCH,EAAUH,IAAEQ,OAAOL,EAAS,CAAC,WAG7BlB,EAAOkB,QAAU,GACjBJ,EAAaK,QAAQ,SAACxC,GAClB,IAAI6C,EAAaT,IAAEU,OAAOP,EAAS,SAACQ,GAGhC,OAFcX,IAAEY,KAAKf,EAAQ,CAAC,KAAMc,EAAMN,KACpBzC,cAAgBA,EAAYA,cAGtD6C,EAAaA,EAAWnC,MAAM,EAAG,GACjCW,EAAOkB,QAAP,sBAAqBlB,EAAOkB,SAA5B,YAAwCM,MAI5CxB,EAAOkB,QAAUH,IAAEQ,OAAOvB,EAAOkB,QAAS,CAAC,WACpClB,IAGX4B,QAAQC,IAAIZ,GACZ,EAAKa,qBAAqBb,EAAW,iBAtCtB,yCA1Be,2DAmElCa,qBAAuB,SAACC,EAAWC,GAC/B,IAAIC,EAAU,gCAAkCC,mBAAmBC,KAAKC,UAAUL,IAC9EM,EAAqBC,SAASC,cAAc,KAChDF,EAAmBG,aAAa,OAAQP,GACxCI,EAAmBG,aAAa,WAAYR,EAAa,SACzDM,SAASG,KAAKC,YAAYL,GAC1BA,EAAmBM,QAEnBC,WAAW,aAIR,MA9EC9C,GACA+C,IACKC,IAAI,iBACJC,KAAK,SAACC,GACH,EAAKrC,iBAAiBqC,EAASC,QAElCC,MAAM,SAASC,GACZvB,QAAQC,IAAIsB,MCL1BC,EAAmB,SAAC,GAAD,IAAG1E,EAAH,EAAGA,MAAH,OAAe,kBAAC2E,EAAA,EAAD,CAAOC,GAAG,OAAOC,QAAS7E,KAM5D8E,EAAiB,SAAC,GAAD,IAAG5E,EAAH,EAAGA,KAAH,OAAc,kBAACyE,EAAA,EAAD,CAAOjC,GAAIxC,EAAM2E,QAAS3E,KAO3D6E,EAAS,KAEQC,E,2MACjBC,aAAe,CACXC,WAAW,EACXC,QAAS,GACTC,MAAO,GACPlD,OAAQ,EAAKxC,MAAMwC,Q,EAEvBmD,MAAQ,EAAKJ,a,EAWbK,gBAAkB,WAEd,IAAInE,G,EAGRoE,UAAY,SAACrD,GACT6C,EAAS,GAET7C,EAAOO,QAAQ,SAAC3C,GACZ,IAAI0F,EAAS,GACPxF,EAAK,UAAMF,EAAME,MAAZ,YAAqBF,EAAMG,aAClCD,KAAS+E,IACTS,EAAST,EAAO/E,GAAOmF,SAG3BK,EAAO5C,KAAK9C,GAEZiF,EAAO/E,GAAS,CACZA,MAAOA,EACPmF,QAASK,M,EAKrBC,mBAAqB,SAACC,EAAD,GAAoB,IAAdC,EAAa,EAAbA,OAEvB,EAAKC,SAAS,CAAER,MAAO,KAEvB,EAAK1F,MAAMmG,SAASF,I,EAGxBG,mBAAqB,SAACJ,EAAD,GAAmB,IAAbN,EAAY,EAAZA,MACvB,EAAKQ,SAAS,CAAEV,WAAW,EAAME,UAEjClB,WAAW,WAEP,GAAI,EAAKmB,MAAMD,MAAMW,OAAS,EAAG,OAAO,EAAKH,SAAS,EAAKX,cAE3D,IAAIe,EAAkB,GAGhBC,EAAc,EAAKZ,MAAMD,MAAMc,OAAOC,MAAM,KAGlD,IAAK,IAAMC,KAAKrB,EAAQ,CACpB,IAAM/E,EAAQ+E,EAAOqB,GAAGpG,MAClBkC,EAAS6C,EAAOqB,GAAGjB,QAyBnBA,EAAU9C,IAAEU,OAAOb,EAtBT,SAACpC,GAEb,IAAIuG,EAAavG,EAAMI,KAAKiG,MAAM,KAAKG,OAAOxG,EAAME,MAAMmG,MAAM,MAGhE,OAAOF,EAAYM,MAAM,SAACC,GAEtB,IAAMC,EAAK,IAAIC,OAAOrE,IAAEsE,aAAaH,GAAO,KAG5C,OAAOH,EAAWO,KAAK,SAACC,EAAWrG,GAC/B,QAAIiG,EAAGK,KAAKD,KACRR,EAAWU,OAAOvG,EAAO,IAClB,SAYnB2E,EAAQY,SAAQC,EAAgBI,GAAK,CAAEpG,QAAOmF,YAItD,EAAKS,SAAS,CACVV,WAAW,EACXC,QAASa,KAEd,M,oFAzFa,OAAXjB,EAAoBiC,KAAKtH,MAAMwC,OAAO6D,OAAS,IAChDiB,KAAK/B,aAAa/C,OAAS8E,KAAKtH,MAAMwC,OACtC8E,KAAKpB,SAAS,CAAE1D,OAAQ8E,KAAKtH,MAAMwC,SACnC8E,KAAKzB,UAAUyB,KAAKtH,MAAMwC,W,+BAyFxB,IAAD,EACiC8E,KAAK3B,MAAnCH,EADH,EACGA,UAAWE,EADd,EACcA,MAAOD,EADrB,EACqBA,QAE1B,OACI,kBAAC8B,EAAA,EAAD,eACIC,MAAO,CAAEC,KAAM,SAAUC,aAAc,QACvC1E,GAAG,cACH2E,OAAK,EACLC,UAAQ,EACRC,YAAa,eACb7C,iBAAkBA,EAClB8C,QAAStC,EACTuC,eAAgBT,KAAKvB,mBACrBiC,eAAgBrF,IAAEsF,SAASX,KAAKlB,mBAAoB,IAAK,CACrD8B,SAAS,IAEb9C,eAAgBA,EAChBK,QAASA,EACTC,MAAOA,GACH4B,KAAKtH,Y,GA1H0BmI,a,2CCb7CC,EAAe,CACjBC,aAAc,KACdzH,cAAe,KACf4B,OAAQ,GACR8F,QAAS,IAGPC,EAAmB,EACnBC,EAAY,IAAIC,GAAW,GA2MlBC,E,2MAvMX/C,MAAQgD,aAAaC,QAAb,kBAAgCL,IAClCxE,KAAK8E,MAAMF,aAAaC,QAAb,kBAAgCL,KAC3CH,E,EAkCNU,eAAiB,SAAC1I,GACd2I,IAAQC,MAAM,CACVpB,SAAU,SACVqB,OAAQ,kBAGZ,EAAK/C,SAAS,CACVmC,aAAcjI,EACdQ,cAAe,EAAKsI,iBAAiB9I,M,EA2C7C+I,eAAiB,WACbJ,IAAQC,MAAM,CACVpB,SAAU,SACVqB,OAAQ,8BAGZ,IAAMG,EAAc,EAAKzD,MAAMnD,OAAOrB,KAAKkI,MAAMlI,KAAKmI,SAAW,EAAK3D,MAAMnD,OAAO6D,SACnF,EAAKH,SACD,CACImC,aAAce,GAElB,WACI,EAAKlD,SAAS,CAAEtF,cAAe,EAAKsI,iBAAiBE,Q,EAgCjEG,cAAgB,SAACvD,EAAD,GAAkB,IAAZwD,EAAW,EAAXA,KAClBxD,EAAEyD,kBACF,IAAMnB,EAAO,YAAO,EAAK3C,MAAM2C,SACzBxH,EAAQ6B,IAAE+G,UAAUpB,EAAS,SAACqB,GAChC,MAAO,UAAGA,EAAKrJ,MAAR,YAAiBqJ,EAAKpJ,aAAcqJ,QAAQJ,IAAS,IAEhElB,EAAQxH,GAAO+I,QAAUvB,EAAQxH,GAAO+I,OACxC,EAAK3D,SAAS,CAAEoC,UAAS1H,cAAe,EAAKsI,iBAAiB,EAAKvD,MAAM0C,iB,sMArIzEU,IAAQe,WAAW,kBACnBf,IAAQgB,SAAS,aAEgB,IAA7BzC,KAAK3B,MAAMnD,OAAO6D,SAGlB0C,IAAQC,MAAM,CACVpB,SAAU,cACVqB,OAAO,uBAAD,OAAyBV,KAGnC9D,IACKC,IAAI,wBACJC,KAAK,SAACC,GACH,EAAKsB,SAAS,CAAE1D,OAAQoC,EAASC,MAAQ,WACrC,EAAKmF,aACL,EAAKb,qBAGZrE,MAAM,SAASC,GACZvB,QAAQC,IAAIsB,M,+IAOxB4D,aAAasB,QACbtB,aAAauB,QAAb,kBAAgC3B,GAAoBxE,KAAKC,UAAUsD,KAAK3B,U,mCAgBxE,IAAIjD,EAAeC,IAAEC,OAAO0E,KAAK3B,MAAMnD,OAAQ,eAC/CE,EAAeA,EAAa7B,IAAI,SAACsJ,GAC7B,MAAO,CAAE5J,YAAY,GAAD,OAAK4J,EAAK7J,MAAV,YAAmB6J,EAAK5J,aAAesJ,QAAQ,KAEvEvC,KAAKpB,SAAS,CAAEoC,QAAS5F,M,uCAGZ2F,GAAe,IAAD,OAC3B,GAAIA,EAAavF,QAAS,CACtB,IAAMsH,EAAgB,GACtBzH,IAAEI,QAAQuE,KAAK3B,MAAM2C,QAAS,SAACjF,GACvBA,EAAOwG,QACPO,EAAclH,KAAKG,EAAO9C,eAGlC,IAAIK,EAAgB,GAapB,OAXA+B,IAAEI,QAAQsF,EAAavF,QAAS,SAACQ,GAC7B,IAAM+G,EAAQ1H,IAAEY,KAAK,EAAKoC,MAAMnD,OAAQ,SAACpC,GACrC,OAAOA,EAAM4C,KAAOM,EAAMN,IAAML,IAAE2H,SAASF,EAAX,UAA6BhK,EAAME,MAAnC,YAA4CF,EAAMG,gBAGlF8J,IACAA,EAAMhJ,MAAQiC,EAAML,OACpBrC,EAAcsC,KAAKmH,MAIvBzJ,EAAcyF,QAAU,EACjBzF,EAAcK,MAAM,EAAG,GAEvBL,EAAcK,MAAM,EAAGL,EAAcyF,QAGhD,OAAO,O,qCAsBX,OACI,gCACI,6BAII,4BAAQkE,QAASjD,KAAK6B,gBAElB,kBAACqB,EAAA,EAAD,CAAMhK,KAAK,YAEf,yBAAKP,UAAU,kBACX,kBAAC,EAAD,CAAWkG,SAAUmB,KAAKwB,eAAgBtG,OAAQ8E,KAAK3B,MAAMnD,SADjE,KAGA,yBAAKvC,UAAU,iBACX,kBAACwK,EAAA,EAAD,CAAUC,UAAQ,EAACjD,KAAK,UACpB,kBAACgD,EAAA,EAASE,KAAV,KACI,kBAACF,EAAA,EAASG,OAAV,CAAiBnD,KAAK,OAAOtC,QAAQ,2BACrC,kBAACsF,EAAA,EAASE,KAAV,CAAeE,WAAS,GAAEvD,KAAKwD,2B,yCAmBvC,IAAD,OACf,OAAOxD,KAAK3B,MAAM2C,QAAQzH,IAAI,SAACwC,EAAQvC,GACnC,OACI,kBAAC2J,EAAA,EAASM,KAAV,CACIhK,IAAKD,EACL2G,KAAMpE,EAAOwG,OAAS,uBAAyB,iBAC/CL,KAAMnG,EAAO9C,YACbgK,QAAS,EAAKhB,oB,mCAO1B,IAAIyB,EAAaxC,EAAU7G,UAAU2F,KAAK3B,MAAM0C,aAAahI,IAAK,WAClE,OAAgC,OAA5BiH,KAAK3B,MAAM0C,cAAsD,OAA7Bf,KAAK3B,MAAM/E,cAE3C,0BAAMX,UAAW+K,EAAa,GAAK,OAAS,IACxC,kBAAC,EAAD,CAAc5K,MAAOkH,KAAK3B,MAAM0C,eAChC,kBAAC,EAAD,CAAezH,cAAe0G,KAAK3B,MAAM/E,iBAK7C,8BACI,kBAACqK,EAAA,EAAD,CAAQpB,QAAM,EAACqB,UAAQ,GACnB,kBAACC,EAAA,EAAD,CAAQD,UAAQ,GAAhB,e,qCAQhB,OACI,gCACI,6BACI,2CAEJ,yBAAKlI,GAAG,eACR,6BACI,8C,+BAOZ,OACI,yBAAK/C,UAAU,WACVqH,KAAK8D,eACL9D,KAAK+D,aACL/D,KAAKgE,oB,GAnMJC,IAAMpD,WCjBxBqD,IAASC,OAAO,kBAAC,EAAD,MAASvH,SAASwH,cAAc,Y","file":"static/js/main.cdd5b27c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CurrentColor = (props) => {\r\n    return (\r\n        <section className=\"current-color\" style={{ backgroundColor: props.color.hex }}>\r\n            <div>\r\n                <h4>{`${props.color.brand} ${props.color.productline}`}</h4>\r\n            </div>\r\n            <div>\r\n                <h1>{props.color.name}</h1>\r\n            </div>\r\n            <div>\r\n                <h4>{props.color.hex.toUpperCase()}</h4>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default CurrentColor;\r\n","import React from 'react';\r\n\r\nconst SimilarColors = (props) => {\r\n    const renderColors = props.similarColors.map((color, index) => {\r\n        return (\r\n            <div key={index} className=\"similar-color\" style={{ backgroundColor: color.hex }}>\r\n                <div>\r\n                    <h4>{`${color.brand} ${color.productline}`}</h4>\r\n                </div>\r\n                <div>\r\n                    <h2>{color.name.charAt(0).toUpperCase() + color.name.slice(1)}</h2>\r\n                </div>\r\n                <div>\r\n                    <h4>{`Δ=${parseFloat(Math.round(color.delta * 100) / 100).toFixed(2)}`}</h4>\r\n                </div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return <section className=\"similar-colors-wrapper\">{renderColors}</section>;\r\n};\r\n\r\nexport default SimilarColors;\r\n","import ColorConvert from 'color-convert';\r\nimport axios from 'axios';\r\nimport _ from 'lodash';\r\nvar DeltaE = require('delta-e');\r\n\r\nexport default class CalcDeltas {\r\n    constructor(doCalculation = true) {\r\n        if (doCalculation) {\r\n            axios\r\n                .get('./colors.json')\r\n                .then((response) => {\r\n                    this.startCalculation(response.data);\r\n                })\r\n                .catch(function(error) {\r\n                    console.log(error);\r\n                });\r\n        }\r\n    }\r\n\r\n    getDeltaE = (color1, color2) => {\r\n        // Convert color 1 to LAB format\r\n        color1 = ColorConvert.hex.lab.raw(color1);\r\n        const lab1 = { L: color1[0], A: color1[1], B: color1[2] };\r\n\r\n        // Convert color 2 to LAB format\r\n        color2 = ColorConvert.hex.lab.raw(color2);\r\n        const lab2 = { L: color2[0], A: color2[1], B: color2[2] };\r\n\r\n        // Get the color difference\r\n        return DeltaE.getDeltaE00(lab1, lab2);\r\n    };\r\n\r\n    startCalculation = async (colors) => {\r\n        // Get the unique product lines\r\n        let productlines = _.uniqBy(colors, 'productline');\r\n\r\n        const newColors = colors.map((color1) => {\r\n            let matches = [];\r\n            colors.forEach((color2) => {\r\n                // Check that we aren't matching against the same color\r\n                if (color2.id !== color1.id) {\r\n                    // Calculate DeltaE\r\n                    const deltaE = this.getDeltaE(color1.hex, color2.hex);\r\n\r\n                    // Push Delta value into array\r\n                    matches.push({ id: color2.id, deltaE });\r\n                }\r\n            });\r\n\r\n            // Sort all matches\r\n            matches = _.sortBy(matches, ['deltaE']);\r\n\r\n            // Get top 5 matches for each product line\r\n            color1.matches = [];\r\n            productlines.forEach((productline) => {\r\n                let lineColors = _.filter(matches, (match) => {\r\n                    const found = _.find(colors, ['id', match.id]);\r\n                    const myValue = found.productline === productline.productline;\r\n                    return myValue;\r\n                });\r\n                lineColors = lineColors.slice(0, 5);\r\n                color1.matches = [...color1.matches, ...lineColors];\r\n            });\r\n\r\n            // Sort final matches\r\n            color1.matches = _.sortBy(color1.matches, ['deltaE']);\r\n            return color1;\r\n        });\r\n\r\n        console.log(newColors);\r\n        this.downloadObjectAsJson(newColors, 'colorsMatched');\r\n    };\r\n\r\n    downloadObjectAsJson = (exportObj, exportName) => {\r\n        var dataStr = 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(exportObj));\r\n        var downloadAnchorNode = document.createElement('a');\r\n        downloadAnchorNode.setAttribute('href', dataStr);\r\n        downloadAnchorNode.setAttribute('download', exportName + '.json');\r\n        document.body.appendChild(downloadAnchorNode); // required for firefox\r\n        downloadAnchorNode.click();\r\n\r\n        setTimeout(function() {\r\n            //document.body.removeChild(downloadAnchorNode);\r\n            //downloadAnchorNode.remove();\r\n            //URL.revokeObjectURL(source);\r\n        }, 10000);\r\n    };\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { Search, Label } from 'semantic-ui-react';\r\nimport CalcDeltas from '../calcDeltas';\r\n\r\n// Semantic UI React Search Bar\r\n// https://react.semantic-ui.com/modules/search/#types-category-custom\r\n\r\nconst categoryRenderer = ({ brand }) => <Label as=\"span\" content={brand} />;\r\n\r\ncategoryRenderer.propTypes = {\r\n    brand: PropTypes.string,\r\n};\r\n\r\nconst resultRenderer = ({ name }) => <Label id={name} content={name} />;\r\n\r\nresultRenderer.propTypes = {\r\n    name: PropTypes.string,\r\n    description: PropTypes.string,\r\n};\r\n\r\nlet source = null;\r\n\r\nexport default class SearchExampleCategory extends Component {\r\n    initialState = {\r\n        isLoading: false,\r\n        results: [],\r\n        value: '',\r\n        colors: this.props.colors,\r\n    };\r\n    state = this.initialState;\r\n\r\n    componentDidUpdate() {\r\n        //if (this.state.colors.length <= 0 && this.props.colors.length > 0) {\r\n        if ((source === null) & (this.props.colors.length > 0)) {\r\n            this.initialState.colors = this.props.colors;\r\n            this.setState({ colors: this.props.colors });\r\n            this.setSource(this.props.colors);\r\n        }\r\n    }\r\n\r\n    calculateDeltas = () => {\r\n        //console.log(this.state.colors);\r\n        new CalcDeltas();\r\n    };\r\n\r\n    setSource = (colors) => {\r\n        source = {};\r\n        // Put this.props.colors into the \"source\" variable\r\n        colors.forEach((color) => {\r\n            let resArr = [];\r\n            const brand = `${color.brand} ${color.productline}`;\r\n            if (brand in source) {\r\n                resArr = source[brand].results;\r\n            }\r\n\r\n            resArr.push(color);\r\n\r\n            source[brand] = {\r\n                brand: brand,\r\n                results: resArr,\r\n            };\r\n        });\r\n    };\r\n\r\n    handleResultSelect = (e, { result }) => {\r\n        //this.setState({ value: result.title });\r\n        this.setState({ value: '' });\r\n        // Pass the searched color to App.js event handler\r\n        this.props.onSubmit(result);\r\n    };\r\n\r\n    handleSearchChange = (e, { value }) => {\r\n        this.setState({ isLoading: true, value });\r\n\r\n        setTimeout(() => {\r\n            // Clear the state back to default values\r\n            if (this.state.value.length < 1) return this.setState(this.initialState);\r\n\r\n            let filteredResults = {};\r\n\r\n            // Create an array of the words that were searched\r\n            const searchTerms = this.state.value.trim().split(' ');\r\n\r\n            // Loop over every color in the database\r\n            for (const i in source) {\r\n                const brand = source[i].brand;\r\n                const colors = source[i].results;\r\n\r\n                // Checks for a match with the given color against all search terms\r\n                const isMatch = (color) => {\r\n                    // split the color's name and brand into an array\r\n                    let colorTerms = color.name.split(' ').concat(color.brand.split(' '));\r\n\r\n                    // return true if 'every' searchTerm matches a colorTerm\r\n                    return searchTerms.every((term) => {\r\n                        // Create regex to check colorTerms against\r\n                        const re = new RegExp(_.escapeRegExp(term), 'i');\r\n\r\n                        // return true if any of the colorTerms matches the regex\r\n                        return colorTerms.some((colorTerm, index) => {\r\n                            if (re.test(colorTerm)) {\r\n                                colorTerms.splice(index, 1);\r\n                                return true;\r\n                            } else {\r\n                                return false;\r\n                            }\r\n                        });\r\n                    });\r\n                };\r\n\r\n                // Call the \"isMatch\" function for each color in \"colors\", then save the \"true\" results to an array\r\n                const results = _.filter(colors, isMatch);\r\n\r\n                // Concat the results to the filteredResults collection\r\n                if (results.length) filteredResults[i] = { brand, results };\r\n            }\r\n\r\n            // Save the results to the state\r\n            this.setState({\r\n                isLoading: false,\r\n                results: filteredResults,\r\n            });\r\n        }, 300);\r\n    };\r\n\r\n    render() {\r\n        const { isLoading, value, results } = this.state;\r\n\r\n        return (\r\n            <Search\r\n                input={{ icon: 'search', iconPosition: 'left' }}\r\n                id=\"searchInput\"\r\n                fluid\r\n                category\r\n                placeholder={'Find a color'}\r\n                categoryRenderer={categoryRenderer}\r\n                loading={isLoading}\r\n                onResultSelect={this.handleResultSelect}\r\n                onSearchChange={_.debounce(this.handleSearchChange, 500, {\r\n                    leading: true,\r\n                })}\r\n                resultRenderer={resultRenderer}\r\n                results={results}\r\n                value={value}\r\n                {...this.props}\r\n            />\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport CurrentColor from './CurrentColor';\r\nimport SimilarColors from './SimilarColors';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport SearchBar from './SearchBar';\r\nimport _ from 'lodash';\r\nimport { Dimmer, Loader, Icon, Dropdown } from 'semantic-ui-react';\r\nimport ReactGA from 'react-ga';\r\nimport calcDeltas from '../calcDeltas';\r\n\r\nconst InitialState = {\r\n    currentColor: null,\r\n    similarColors: null,\r\n    colors: [],\r\n    filters: [],\r\n};\r\n\r\nconst colorDataVersion = 1;\r\nconst calcDelta = new calcDeltas(false);\r\n\r\nclass App extends React.Component {\r\n    // Retrieve the last state from localStorage\r\n    state = localStorage.getItem(`appState${colorDataVersion}`)\r\n        ? JSON.parse(localStorage.getItem(`appState${colorDataVersion}`))\r\n        : InitialState;\r\n\r\n    async componentDidMount() {\r\n        ReactGA.initialize('UA-149514108-1');\r\n        ReactGA.pageview('/homepage');\r\n\r\n        if (this.state.colors.length === 0) {\r\n            // Load JSON color data\r\n\r\n            ReactGA.event({\r\n                category: 'Load Colors',\r\n                action: `Load Colors Version ${colorDataVersion}`,\r\n            });\r\n\r\n            axios\r\n                .get('./colorsMatched.json')\r\n                .then((response) => {\r\n                    this.setState({ colors: response.data }, () => {\r\n                        this.getFilters();\r\n                        this.setRandomColor();\r\n                    });\r\n                })\r\n                .catch(function(error) {\r\n                    console.log(error);\r\n                });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // Remember state for the next mount\r\n        localStorage.clear();\r\n        localStorage.setItem(`appState${colorDataVersion}`, JSON.stringify(this.state));\r\n    }\r\n\r\n    onSearchSubmit = (color) => {\r\n        ReactGA.event({\r\n            category: 'Search',\r\n            action: 'Search Submit',\r\n        });\r\n\r\n        this.setState({\r\n            currentColor: color,\r\n            similarColors: this.getSimilarColors(color),\r\n        });\r\n    };\r\n\r\n    getFilters() {\r\n        let productlines = _.uniqBy(this.state.colors, 'productline');\r\n        productlines = productlines.map((line) => {\r\n            return { productline: `${line.brand} ${line.productline}`, active: true };\r\n        });\r\n        this.setState({ filters: productlines });\r\n    }\r\n\r\n    getSimilarColors(currentColor) {\r\n        if (currentColor.matches) {\r\n            const activeFilters = [];\r\n            _.forEach(this.state.filters, (filter) => {\r\n                if (filter.active) {\r\n                    activeFilters.push(filter.productline);\r\n                }\r\n            });\r\n            let similarColors = [];\r\n\r\n            _.forEach(currentColor.matches, (match) => {\r\n                const found = _.find(this.state.colors, (color) => {\r\n                    return color.id === match.id && _.includes(activeFilters, `${color.brand} ${color.productline}`);\r\n                });\r\n\r\n                if (found) {\r\n                    found.delta = match.deltaE;\r\n                    similarColors.push(found);\r\n                }\r\n            });\r\n\r\n            if (similarColors.length >= 5) {\r\n                return similarColors.slice(0, 5);\r\n            } else {\r\n                return similarColors.slice(0, similarColors.length);\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    setRandomColor = () => {\r\n        ReactGA.event({\r\n            category: 'Button',\r\n            action: 'Random Color Button Click',\r\n        });\r\n\r\n        const randomColor = this.state.colors[Math.floor(Math.random() * this.state.colors.length)];\r\n        this.setState(\r\n            {\r\n                currentColor: randomColor,\r\n            },\r\n            () => {\r\n                this.setState({ similarColors: this.getSimilarColors(randomColor) });\r\n            }\r\n        );\r\n    };\r\n\r\n    renderHeader() {\r\n        return (\r\n            <header>\r\n                <nav>\r\n                    {/* <div className=\"brand\">\r\n                        <h3>Pigment</h3>\r\n                    </div> */}\r\n                    <button onClick={this.setRandomColor}>\r\n                        {/* <Icon name=\"tint\" /> */}\r\n                        <Icon name=\"random\" />\r\n                    </button>\r\n                    <div className=\"search-wrapper\">\r\n                        <SearchBar onSubmit={this.onSearchSubmit} colors={this.state.colors} />;\r\n                    </div>\r\n                    <div className=\"filter-button\">\r\n                        <Dropdown multiple icon=\"filter\">\r\n                            <Dropdown.Menu>\r\n                                <Dropdown.Header icon=\"tags\" content=\"Filter by Product Line\" />\r\n                                <Dropdown.Menu scrolling>{this.renderFilterList()}</Dropdown.Menu>\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </div>\r\n                </nav>\r\n            </header>\r\n        );\r\n    }\r\n\r\n    onFilterClick = (e, { text }) => {\r\n        e.stopPropagation();\r\n        const filters = [...this.state.filters];\r\n        const index = _.findIndex(filters, (item) => {\r\n            return `${item.brand} ${item.productline}`.indexOf(text) > -1;\r\n        });\r\n        filters[index].active = !filters[index].active;\r\n        this.setState({ filters, similarColors: this.getSimilarColors(this.state.currentColor) });\r\n    };\r\n\r\n    renderFilterList() {\r\n        return this.state.filters.map((filter, index) => {\r\n            return (\r\n                <Dropdown.Item\r\n                    key={index}\r\n                    icon={filter.active ? 'check square outline' : 'square outline'}\r\n                    text={filter.productline}\r\n                    onClick={this.onFilterClick}\r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    renderMain() {\r\n        var deltaWhite = calcDelta.getDeltaE(this.state.currentColor.hex, '#FFFFFF');\r\n        if (this.state.currentColor !== null && this.state.similarColors !== null) {\r\n            return (\r\n                <main className={deltaWhite < 33 ? 'dark' : ''}>\r\n                    <CurrentColor color={this.state.currentColor} />\r\n                    <SimilarColors similarColors={this.state.similarColors} />\r\n                </main>\r\n            );\r\n        } else {\r\n            return (\r\n                <main>\r\n                    <Dimmer active inverted>\r\n                        <Loader inverted>Loading</Loader>\r\n                    </Dimmer>\r\n                </main>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderFooter() {\r\n        return (\r\n            <footer>\r\n                <div>\r\n                    <h4>Best Match</h4>\r\n                </div>\r\n                <div id=\"footerline\"></div>\r\n                <div>\r\n                    <h4>Good Match</h4>\r\n                </div>\r\n            </footer>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                {this.renderHeader()}\r\n                {this.renderMain()}\r\n                {this.renderFooter()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}